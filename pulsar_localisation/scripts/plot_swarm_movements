#!/usr/bin/env python

import random

import rospy
from tf2_ros import TransformListener, Buffer, TransformException
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point
from gazebo_msgs.srv import GetLinkState

import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches

import numpy as np


tf2 = None


fig, ax = plt.subplots()


class Route:
    def __init__(self, name="route"):
        self._poses = []
        self._col = (random.random(), random.random(), random.random())
        self._name = name
        self._has_data = False
    
    def add_pos(self, position):
        self._poses.append(position)
        self._has_data = True

    def get_recent_pos(self):
        return self._poses[-1]

    def plot(self):
        verts = []
        codes = []
        for pos in self._poses:
            verts.append((pos.x, pos.y))
            codes.append(Path.LINETO)
        if not len(codes):
            return
        codes[0] = Path.MOVETO

        path = Path(verts, codes)
        self._patch = patches.PathPatch(
            path, facecolor='none', lw=2, edgecolor=self._col,
            label=self._name)

        ax.add_patch(self._patch)
    
    def save(self):
        verts = []
        for pos in self._poses:
            verts.append([pos.x, pos.y])
        verts = np.array(verts)
        np.savetxt(self._name+"_route_data.txt", verts)

    def has_data(self):
        return self._has_data


class RobotRoutePlotter:
    def __init__(self, robot_name="pulsar_0"):
        self._name = robot_name
        raw_sub = rospy.Subscriber(
            robot_name+"/odometry/raw", Odometry, self.raw_odom_cb)
        filtered_sub = rospy.Subscriber(
            robot_name+"/odometry/filtered", Odometry,
            self.filtered_odom_cb)

        self._raw_route = Route(name=robot_name+"_raw_odom")
        self._filtered_route = Route(name=robot_name+"_ekf_odom")
        self._MCL_route = Route(name=robot_name+"_MCL")
        self._perfect_route = Route(name=robot_name+"_perfect")

        self._gzservice = rospy.ServiceProxy(
            "/gazebo/get_link_state", GetLinkState)

    def filtered_odom_cb(self, odom):
        self._filtered_route.add_pos(odom.pose.pose.position)

    def raw_odom_cb(self, odom):
        self._raw_route.add_pos(odom.pose.pose.position)

    def MCL_cb(self, trans):
        self._MCL_route.add_pos(trans.transform.translation)

    def perfect_cb(self, pose):
        self._perfect_route.add_pos(pose.position)

    def update_route_measurements(self):
        try:
            mcl_trans = tf2.lookup_transform(
                "map", self._name+"/base_link", rospy.Time(0))
            self.MCL_cb(mcl_trans)
        except TransformException as e:
            rospy.logwarn(e)

        perfect_state = self._gzservice(self._name+"::base_link", "world")
        if not perfect_state.success:
            rospy.logwarn(
                "Failed to get transform from 'world' to '" 
                + perfect_state.link_name + "'.")
        else:
            self.perfect_cb(perfect_state.link_state.pose)

    def plot_all_routes(self):
        self._raw_route.plot()
        self._filtered_route.plot()
        self._MCL_route.plot()
        self._perfect_route.plot()
    
    def save_all_routes(self):
        self._raw_route.save()
        self._filtered_route.save()
        self._MCL_route.save()
        self._perfect_route.save()

    def has_data(self):
        return self._raw_route.has_data() and self._filtered_route.has_data() and self._MCL_route.has_data() and self._perfect_route.has_data()


class SwarmRoutePlotter:
    def __init__(self, prefix, num_robots):
        self._robot_routes = []
        for i in range(num_robots):
            robot_name = prefix + str(i)
            self._robot_routes.append(RobotRoutePlotter(robot_name))

        self._raw_data = []
        self._ekf_data = []
        self._algo_data = []


    def update(self):
        for route in self._robot_routes:
            route.update_route_measurements()

        if not route.has_data():
            return
        
        self.calculate_average_route()

        self.plot(self._raw_data, 'raw')
        self.plot(self._ekf_data, 'ekf')
        self.plot(self._algo_data, 'algorithm')


    def calculate_average_route(self):
        # Plotting l2 error rather than full path taken
        t = rospy.Time.now()
        t = t.secs + t.nsecs * 1e-9

        def l2_err(A, B):
            dx = A.x - B.x
            dy = A.y - B.y
            return dx ** 2 + dy ** 2
        raw = Point()
        ekf = Point()
        algo = Point()
        perf = Point()

        n = len(self._robot_routes)
        for route in self._robot_routes:
            r = route._raw_route.get_recent_pos()
            raw.x += r.x / n
            raw.y += r.y / n

            r = route._filtered_route.get_recent_pos()
            ekf.x += r.x / n
            ekf.y += r.y / n

            r = route._MCL_route.get_recent_pos()
            algo.x += r.x / n
            algo.y += r.y / n

            r = route._perfect_route.get_recent_pos()
            perf.x += r.x / n
            perf.y += r.y / n

        raw_err = l2_err(raw, perf)
        ekf_err = l2_err(ekf, perf)
        algo_err = l2_err(algo, perf)

        self._raw_data.append((t, raw_err))
        self._ekf_data.append((t, ekf_err))
        self._algo_data.append((t, algo_err))


    def plot(self, verts, label):
        arr = np.array(verts)
        plt.plot(arr[:, 0], arr[:, 1], label=label)

    
    def save_data(self):
        np.savetxt("swarm_raw_error.txt", np.array(self._raw_data))
        np.savetxt("swarm_ekf_error.txt", np.array(self._ekf_data))
        np.savetxt("swarm_algo_error.txt", np.array(self._algo_data))


def main():
    global tf2

    rospy.init_node("robot_plotter")
    rospy.wait_for_service("/gazebo/get_link_state")

    tf2 = Buffer()
    listener = TransformListener(tf2)

    num_robots = rospy.get_param("~num_robots", 5)
    robot_prefix = rospy.get_param("~robot_prefix", "pulsar_")

    plotter = SwarmRoutePlotter(robot_prefix, num_robots)

    sleeper = rospy.Rate(10)
    sleeper.sleep()

    try:
        while not rospy.is_shutdown():
            sleeper.sleep()
            plt.clf()
            plotter.update()
            leg = plt.legend()
            plt.xlabel("time (s)")
            plt.ylabel("l2 error (m^2)")
            plt.ylim(-0.1, 5)
            plt.pause(0.001)
    finally:
        plotter.save_data()
    
    print("Finished plotting!")
    plt.show()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
