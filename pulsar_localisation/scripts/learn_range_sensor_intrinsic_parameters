#!/usr/bin/env python

import numpy as np
from scipy import special

import rospy
import tf2_ros
import tf.transformations

from nav_msgs.msg import OccupancyGrid
from sensor_msgs.msg import Range
from geometry_msgs.msg import Transform, Pose
from gazebo_msgs.srv import GetLinkState


DATA_NUM = 400


def transform_to_pq(msg):
    p = np.array([msg.translation.x, msg.translation.y, msg.translation.z])
    q = np.array([msg.rotation.x, msg.rotation.y,
                  msg.rotation.z, msg.rotation.w])
    return p, q


def pose_to_pq(msg):
    p = np.array([msg.position.x, msg.position.y, msg.position.z])
    q = np.array([msg.orientation.x, msg.orientation.y,
                  msg.orientation.z, msg.orientation.w])
    return p, q


def range_cb(msg):
    global range_data
    global range_poses
    global pose_query
    global tf2

    if len(range_data) >= DATA_NUM:
        return

    query = pose_query("pulsar_0::base_link", "world")
    base_wrt_world = query.link_state.pose
    try:
        range_wrt_base_tf = tf2.lookup_transform(
            "pulsar_0/base_link", msg.header.frame_id, msg.header.stamp)
    except(tf2_ros.LookupException, tf2_ros.ConnectivityException, 
           tf2_ros.ExtrapolationException) as e:
        rospy.logwarn(e)
        return
    base_wrt_world_trans, base_wrt_world_rot = pose_to_pq(base_wrt_world)
    range_wrt_base_trans, range_wrt_base_rot = transform_to_pq(
        range_wrt_base_tf.transform)

    trans = tf.transformations.translation_matrix(base_wrt_world_trans)
    rot = tf.transformations.quaternion_matrix(base_wrt_world_rot)
    base_wrt_world_mat = trans*rot

    trans = tf.transformations.translation_matrix(range_wrt_base_trans)
    rot = tf.transformations.quaternion_matrix(range_wrt_base_rot)
    range_wrt_base_mat = trans*rot

    range_wrt_world_mat = range_wrt_base_mat * base_wrt_world_mat
    range_wrt_world_trans = tf.transformations.translation_from_matrix(
        range_wrt_world_mat)
    range_wrt_world_rot = tf.transformations.quaternion_from_matrix(
        range_wrt_world_mat)

    range_wrt_world_pose = Pose()
    range_wrt_world_pose.position.x = range_wrt_world_trans[0]
    range_wrt_world_pose.position.y = range_wrt_world_trans[1]
    range_wrt_world_pose.position.z = range_wrt_world_trans[2]
    range_wrt_world_pose.orientation.x = range_wrt_world_rot[0]
    range_wrt_world_pose.orientation.y = range_wrt_world_rot[1]
    range_wrt_world_pose.orientation.z = range_wrt_world_rot[2]
    range_wrt_world_pose.orientation.w = range_wrt_world_rot[3]

    if len(range_data) < DATA_NUM:
        range_poses.append(range_wrt_world_pose)
        range_data.append(msg)


def map_cb(msg):
    global map_grid
    map_grid = msg


def ray_cast(x, ang):
    global map_grid
    th = 2*np.arccos(map_grid.info.origin.orientation.w) * (-1 if map_grid.info.origin.orientation.z < 0 else 1)
    dx = x.position.x - map_grid.info.origin.position.x
    dy = x.position.y - map_grid.info.origin.position.y

    ang += th
    rx = np.cos(ang)
    ry = np.sin(ang)

    signx = 1 if rx >= 0 else -1
    signy = 1 if ry >= 0 else -1

    offsetx = 1 if rx > 0 else 0
    offsety = 1 if ry > 0 else 0

    curx =  np.cos(th)*dx + np.sin(th)*dy
    cury = -np.sin(th)*dx + np.cos(th)*dy
    
    startx = curx
    starty = cury

    tilex = int(curx / map_grid.info.resolution + 0.5)
    tiley = int(cury / map_grid.info.resolution + 0.5)

    t = 0
    dtx = ((tilex + offsetx)*map_grid.info.resolution - curx) / rx
    dty = ((tiley + offsety)*map_grid.info.resolution - cury) / ry

    while (tilex >= 0 and tilex < map_grid.info.width and
           tiley >= 0 and tiley < map_grid.info.height):
        if map_grid.data[tiley*map_grid.info.width + tilex]:
            return t
        dtx = ((tilex + offsetx)*map_grid.info.resolution - curx) / rx
        dty = ((tiley + offsety)*map_grid.info.resolution - cury) / ry
        
        if dtx < dty:
            t += dtx
            tilex += signx
        else:
            t += dty
            tiley += signy

        curx = startx + rx * t
        cury = starty + ry * t

    return t


def cone_cast(x):
    SPREAD = 0.05
    ang = 2 * np.arccos(x.orientation.w) * (-1 if x.orientation.z < 0 else 1)
    r1ang = ang - SPREAD / 2
    r2ang = ang + SPREAD / 2

    RESOLUTION = 0.01
    ray_ang = r1ang
    closest = ray_cast(x, ray_ang)
    while ray_ang < r2ang:
        ray_ang += RESOLUTION
        dist = ray_cast(x, ray_ang)
        if dist < closest:
            closest = dist
    return dist


def phit(Z, rawZ, ideal_Z, sigma):
    a = 0.5*special.erf(np.sqrt(0.5)*(Z-ideal_Z)/sigma)
    b = 0.5*special.erf(np.sqrt(0.5)*(0-ideal_Z)/sigma)
    eta = np.reciprocal(a - b)

    a = np.reciprocal(np.sqrt(2*np.pi*sigma**2))
    b = np.exp(-0.5*((Z-ideal_Z) ** 2)/sigma**2)
    n = a*b

    res = eta * n

    for i, z in enumerate(rawZ):
        if z.range > z.max_range or z.range < z.min_range:
            res[i] = 0
    return res


def pshort(z, ideal_z):
    global lamshort
    if z.min_range <= z.range and z.range <= ideal_z:
        eta = 1/(1-np.exp(-lamshort*ideal_z))
        return eta * lamshort * np.exp(-lamshort*z.range)
    return 0


def pmax(z):
    if z.range >= z.max_range:
        return 1
    return 0


def prand(z):
    if z.range < z.min_range or z.range >= z.max_range:
        return 0
    return 1 / (z.max_range - z.min_range)


def learn_params_iteration(Z, X, rawZ):
    global zhit
    global zshort
    global zmax
    global zrand
    global sigmahit
    global lamshort

    it = 0
    ideal_Z = []
    for x in X:
        ideal_Z.append(cone_cast(x))
    ideal_Z = np.array(ideal_Z)
    a = phit(Z, rawZ, ideal_Z, sigmahit) 
    b = np.array(list(pshort(z, iz) for z, iz in zip(rawZ, ideal_Z)))
    c = np.array(list(pmax(z) for z in rawZ))
    d = np.array(list(prand(z) for z in rawZ))

    eta = np.reciprocal(a + b + c + d)
    ehit = eta * a
    eshort = eta * b
    emax = eta * c
    erand = eta * d

    Zabs = np.sqrt(np.sum(Z ** 2))
    zhit = np.sum(ehit) / Zabs
    zshort = np.sum(eshort) / Zabs
    zmax = np.sum(emax) / Zabs
    zrand = np.sum(erand) / Zabs
    sigmahit = np.sqrt(
        1/np.sum(ehit) + np.sum(ehit*((Z - ideal_Z) ** 2)))
    lamshort = np.sum(eshort)/np.sum(eshort*Z)

    return zhit, zshort, zmax, zrand, sigmahit, lamshort


def learn_params(Z, X, raw_Z, res=0.0001):
    global zhit
    global zshort
    global zmax
    global zrand
    global sigmahit
    global lamshort

    nhit, nshort, nmax, nrand, nsigma, nlam = learn_params_iteration(
        Z, X, raw_Z)

    it = 0
    
    while((abs(nhit-zhit) > res or abs(nshort-zshort) > res or
           abs(nmax-zmax) > res or abs(nrand-zrand) > res or
           abs(nsigma-sigmahit) > res or abs(nlam-lamshort) > res)
          and not rospy.is_shutdown()) or it < 5:
        zhit = nhit
        zshort = nshort
        zmax = nmax
        zrand = nrand
        sigmahit = nsigma
        lamshort = nlam
        nhit, nshort, nmax, nrand, nsigma, nlam = learn_params_iteration(
            Z, X, raw_Z)
        it += 1
        rospy.loginfo("iteration {} complete.".format(it) +
            "\nzhit: {}\tzshort: {}\tzmax: {}\tzrand: {}\tsigmahit: {}\tlambdashort: {}".format(zhit, zshort, zmax, zrand, sigmahit, lamshort))


def main():
    global zhit
    global zshort
    global zmax
    global zrand
    global sigmahit
    global lamshort
    global map_grid

    global range_data
    global range_poses
    global pose_query
    global tf2

    rospy.init_node("intrinsic_parameter_learner")

    zhit = 11.7
    zshort = 11.4
    zmax = 0.1
    zrand = 7.25
    sigmahit = 1.58
    lamshort = 0.96
    map_grid = None
    range_data = []
    range_poses = []
    tf2 = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf2)

    # Get map
    rospy.Subscriber("/map", OccupancyGrid, map_cb)
    while map_grid == None and not rospy.is_shutdown:
        rospy.sleep(0.1)

    
    # For getting X and Z
    rospy.wait_for_service("/gazebo/get_link_state")
    pose_query = rospy.ServiceProxy("/gazebo/get_link_state", GetLinkState)

    # Get Z + X
    rospy.Subscriber("/pulsar_0/left_range_finder/range", Range, range_cb)
    rospy.Subscriber("/pulsar_0/middle_range_finder/range", Range, range_cb)
    rospy.Subscriber("/pulsar_0/right_range_finder/range", Range, range_cb)

    while len(range_data) < DATA_NUM and not rospy.is_shutdown():
        rospy.sleep(1)
        rospy.loginfo("{} range measurements collected.".format(
            len(range_data)))

    rawZ = np.array(range_data)
    X = np.array(range_poses)
    ranges = []
    for z in rawZ:
        ranges.append(z.range)
    Z = np.array(ranges)

    learn_params(Z, X, rawZ)

    rospy.logerr(
        "\n\nzhit: {}\nzshort: {}\nzmax: {}\nzrand: {}\nsigmahit: {}\nlambdashort: {}\n".format(zhit, zshort, zmax, zrand, sigmahit, lamshort))


if __name__ == '__main__':
    main()
